module org/webdsl/dsl/transformation/expand-templates

imports
  libstrategolib
  libwebdsl-front

signature constructors
  FlattenExpandList : Term -> Term

strategies

  expand-templates =
    {| ExpandLocalFound:
      repeat( {| ExpandTemplateCall:
        alltd(register-expand)
      ; apply-expand
      |} )
    ; if where(ExpandLocalFound) then
        alltd(expand-local)
      ; topdown(try(fetch(?FlattenExpandList(_)); map(try(?FlattenExpandList(<id>))); flatten-list))
      end
    |}

rules

  register-expand :
    ExpandTemplateDefinition(name, vars, defs) -> RemoveMe()
    with  rules(ExpandTemplateDefinition : name -> (vars, defs))

  register-expand :
    ExpandTemplateCall(vars, name) -> RemoveMe()
    with  rules(ExpandTemplateCall :+= (name, vars))

rules

  apply-expand =
    ?Application(qid,sections){anno*}
  ; names := <bagof-ExpandTemplateCall; uniq>
  ; <not(?[])> names
  ; newdefs := <mapconcat(inline-expand)> names
  ; !Application(qid,[Section("expandtemplate", newdefs) | sections]){anno*}

  inline-expand =
    ?(<id>, vars)
  ; ExpandTemplateDefinition
  ; ?(tvars, body)
  ; <zip; foldr(\ ((tvar,var), b) -> <handle-string-var(|tvar,var)> b \ | body) <+ debug(|"expand-template failed")> (tvars, vars)

  handle-string-var(|tvar,var) =
    where(tvar-lower := <lower-case> tvar; var-lower := <lower-case> var)
  ; alltd(
       \x -> var where <?tvar> x\ // replace any string occurrence, because the expandtemplate definitions are parsed as regular definitions
    <+ \x -> <where(is-string; is-substring(!tvar)); string-replace(|tvar, var)> x\ // construct name like Person -> createPerson
    <+ \x -> var-lower where <?tvar-lower> x\ // replace lowercase occurrence, construct name like Person -> person
    <+ \x -> <where(is-string; is-substring(!tvar-lower)); string-replace(|tvar-lower, var-lower)> x\) // construct name like Person -> createperson

rules

  register-expand:
    dl@ExpandLocal(vals, tvar, elems) -> dl
    where not(ExpandLocalFound)
    with  rules(ExpandLocalFound := 1)

  expand-local :
    ExpandLocal(vals, tvar, elems) -> FlattenExpandList(body)
    with  body := <map(\ x -> <handle-string-var(|tvar,x)> elems \ <+ debug(|"expand-local failed"))> vals
