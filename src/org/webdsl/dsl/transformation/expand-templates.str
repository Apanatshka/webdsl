module org/webdsl/dsl/transformation/expand-templates

imports
  libstrategolib
  libwebdsl-front

signature constructors
  FlattenExpandList : Term -> Term

strategies

  expand-templates =
    {| ExpandLocalFound:
      repeat( {| ExpandTemplateCall:
        alltd( register-expand )
      ; apply-expand
      |} )
    ; if where( ExpandLocalFound ) then
        alltd( expand-local )
      ; topdown(try( flatten-expand-list ))
      end
    |}

  flatten-expand-list = fetch( ?FlattenExpandList(_) ); map(try( ?FlattenExpandList(<id>) )); flatten-list

rules

  register-expand :
    ExpandTemplateDefinition(name, vars, defs) -> RemoveMe()
    with  rules(ExpandTemplateDefinition : name -> (vars, defs))

  register-expand :
    ExpandTemplateCall(vars, name) -> RemoveMe()
    with  rules(ExpandTemplateCall :+= (name, vars))

rules

  apply-expand =
    ?Application(qid,sections){anno*}
  ; namevals := <bagof-ExpandTemplateCall; uniq>
  ; <not(?[])> namevals
  ; newdefs := <map( inline-expand ); flatten-list> namevals
  ; !Application(qid,[Section("expandtemplate", newdefs) | sections]){anno*}

  inline-expand =
    ?(<id>, vals)
  ; ExpandTemplateDefinition
  ; ?(tvars, body)
  ; tlen := <length> tvars
  ; len := <length> vals
  ; if <?tlen> len
    then <inline-expand-helper(| tvars, body )> vals          // list of definitions
    else <inline-expand-multiple(| tlen, tvars, body )> vals  // list of expanded templates with lists of definitions
    end

  inline-expand-multiple(| tlen, tvars, body ) :
    vals -> [ expanded | <try(<inline-expand-multiple(| tlen, tvars, body )> rest)> ]
    where (curvals, rest) := <split-at(| tlen )> vals
        ; expanded := <inline-expand-helper(| tvars, body )> curvals

  inline-expand-helper(| tvars, body ) :
    vals -> <zip; foldr(\ ((tvar,val), b) -> <handle-string-var(| tvar, val )> b \ | body ) <+ debug(| "expand-template failed" )> (tvars, vals)

  handle-string-var(| tvar, val ) =
    where(tvar-lower := <lower-case> tvar; val-lower := <lower-case> val)
  ; alltd(
       \x -> val where <?tvar> x\ // replace any string occurrence, because the expandtemplate definitions are parsed as regular definitions
    <+ \x -> <where(is-string; is-substring(!tvar)); string-replace(|tvar, val)> x\ // construct name like Person -> createPerson
    <+ \x -> val-lower where <?tvar-lower> x\ // replace lowercase occurrence, construct name like Person -> person
    <+ \x -> <where(is-string; is-substring(!tvar-lower)); string-replace(|tvar-lower, val-lower)> x\) // construct name like Person -> createperson

rules

  register-expand:
    dl@ExpandLocal(vals, tvar, elems) -> dl
    where not(ExpandLocalFound)
    with  rules(ExpandLocalFound := 1)

  expand-local :
    ExpandLocal(vals, tvar, elems) -> FlattenExpandList(body)
    with  body := <map(\ x -> <handle-string-var(|tvar,x)> elems \ <+ debug(|"expand-local failed"))> vals
