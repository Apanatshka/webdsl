module org/webdsl/dsl/languages/action/typechecker/variable-unused

imports
  libstrategolib
  libwebdsl-front
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/languages/ajax/rename
  org/webdsl/dsl/languages/ui/typecase-template

rules

  vardecl-unused-error(|x) :
    t -> <add-warning(|message)>
    where not( <VarIsUsed> x )
        ; if <has-anno(?OriginalTypeCaseVarName(name))> t
          then message := ["Typecase variable name '", name, "' is not used in this block"]
          else message := ["Variable name '", x, "' is never used"] end

  constraint-error-action : VarDecl(x, _) -> <vardecl-unused-error(|x)>
  constraint-error-action : TemplateVarDecl(x, _) -> <vardecl-unused-error(|x)>
  constraint-error-action : VarDeclInit(x, _, _) -> <vardecl-unused-error(|x)>
  constraint-error-action : TemplateVarDeclInit(x, _, _) -> <vardecl-unused-error(|x)>
  constraint-error-action : VarDeclInitInferred(x, _)-> <vardecl-unused-error(|x)>
  constraint-error-action : TemplateVarDeclInitInferred(x, _) -> <vardecl-unused-error(|x)>

rules

  farg-unused-error(|x) :
    t -> <add-warning(|["Formal argument name '", x, "' is never used"])>
    where not( <VarIsUsed> x )

  constraint-error-action :
    Arg(x{anno*}, _) -> <farg-unused-error(|x)>
    where <not(fetch(is-string))> anno*  // can have other annotations like IsTemplateArg()

rules

  for-loop-var-unused-error(|x) :
    t -> <add-warning(|["For loop variable name '", x, "' is never used"])>
    where not( <VarIsUsed> x )

  constraint-error-action : For(x, _, _, _, _, _) -> <for-loop-var-unused-error(|x)>
  constraint-error-action : ForInferred(x, _, _, _, _) -> <for-loop-var-unused-error(|x)>
  constraint-error-action : ForAll(x, _, _, _, _) -> <for-loop-var-unused-error(|x)>
  constraint-error-action : ForCount(x, _, _, _, _) -> <for-loop-var-unused-error(|x)>

  constraint-error-action : ForStmt(x, _, _, _, _) -> <for-loop-var-unused-error(|x)>
  constraint-error-action : ForStmtInferred(x, _, _, _) -> <for-loop-var-unused-error(|x)>
  constraint-error-action : ForAllStmt(x, _, _, _) -> <for-loop-var-unused-error(|x)>
  constraint-error-action : ForCountStmt(x, _, _, _) -> <for-loop-var-unused-error(|x)>

rules

  list-compr-unused-error(|x) :
    t -> <add-warning(|["List comprehension variable name '", x, "' is never used"])>
    where not( <VarIsUsed> x )

  constraint-error-action : ForExp(_, x, _, _, _, _) -> <list-compr-unused-error(|x)>

rules

  placeholder-unused-error(|x) :
    t -> <add-warning(|["Placeholder name '", x, "' is never used"])>
    where not( <VarIsUsed> x )

  constraint-error-action :
    Placeholder(Add(String(""),Var(_)), _){anno*} -> <placeholder-unused-error(|x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*

  constraint-error-action :
    PlaceholderWithAjaxCall(Add(String(""),Var(_)), _){anno*} -> <placeholder-unused-error(|x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*

  constraint-error-action :
    Placeholder(_, Add(String(""),Var(_)), _){anno*} -> <placeholder-unused-error(|x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*

  constraint-error-action :
    PlaceholderWithAjaxCall(_, Add(String(""),Var(_)), _){anno*} -> <placeholder-unused-error(|x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*

rules

  constraint-error-action : ExpVarArgFor(x, _, _, _, _) -> <for-loop-var-unused-error(|x)>
  constraint-error-action : ExpVarArgForInferred(x, _, _, _) -> <for-loop-var-unused-error(|x)>
  constraint-error-action : ExpVarArgForAll(x, _, _, _) -> <for-loop-var-unused-error(|x)>
  constraint-error-action : ExpVarArgForCount(x, _, _, _) -> <for-loop-var-unused-error(|x)>
