module org/webdsl/dsl/languages/action/normalize

rules // functions

  normalize-action :
    IfNoElse(e, bit) -> If(e, bit, Block([]))

  normalize-action :
    IfWithElseIf(e, then, elseif*, else) -> If(e, then, else')
    with  else' := <foldr(\ (ElseIf(c, t), rest) -> Block([If(c, t, rest)]) \ | else)> elseif*

rules // case statement

  desugar-in-define-context : //after desugaring, this rule calls rename on the whole define. Otherwise the var is seen as global var.
    stat|[ case(e) { alt* } ]| -> stat|[ { var x : srt := e; stat } ]|
    with  srt := <type-of> e
        ; x := <toplevel-rename> "caseval"
        ; stat := <case-to-if(|x)> alt*

  case-to-if(|x) :
    [] -> stat|[ { } ]|

  case-to-if(|x) :
    [ |[ const { stat1* } ]|, alt* ] -> stat|[ if(x == const) { stat1* } else { stat2 } ]|
    where stat2 := <case-to-if(|x)> alt*

  case-to-if(|x) :
    [ |[ default { stat1* } ]|, alt* ] -> stat|[ { stat1* } ]|
