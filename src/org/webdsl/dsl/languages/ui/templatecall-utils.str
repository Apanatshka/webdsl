module org/webdsl/dsl/languages/ui/templatecall-utils

rules

  is-defined-template-call : t@TemplateCall(n,args,p,b){anno*} -> t where <CallToDefinedTemplate> n

rules

  is-defined-tc-get-called-tc : TemplateCall(n,args,p,b){anno*} -> <CallToDefinedTemplate> n

  is-defined-tc-get-called-def = is-defined-tc-get-called-tc; TemplateDecl

rules

  get-tc-name : TemplateCall(n,args,p,b){anno*} -> n

  set-tc-name(|n) : TemplateCall(_,args,p,b){anno*} -> TemplateCall(n,args,p,b){anno*}

rules

  get-tc-args : TemplateCall(n,args,p,b){anno*} -> args

rules

  get-tc-props : TemplateCall(n,args,p,b){anno*} -> p

rules

  get-tc-components : TemplateCall(n,args,p,b) -> (n, args, p, b)

rules //for each defined template call with elements, get the elements part

  get-tc-elements : TemplateCall(n,args,p,b){anno*} -> b where <CallToDefinedTemplate> n

/*
rules //for each defined template call with named template arguments, get the template arguments

  get-tc-argdefs : TemplateCall(n,args,p,TemplateWith(argdef*)) -> argdef* where <CallToDefinedTemplate> n
*/

rules

  match-template-with-name(|name) = // check for each template call syntactic variant
  //?TemplateCall(name,_,_,_)  doesn't match when there is an annotation on name,
  // apparently matching vars is annotation-sensitive
  // using workaround
    ?TemplateCall(x,_,_,_)
  ; where(eq-vars-annos-stripped(|x,name))

// for a recursive strip-annos see
// https://svn.strategoxt.org/repos/StrategoXT/aster/trunk/runtime/aster/lang/annotations.str
//, not needed here atm
  eq-vars-annos-stripped(|v1,v2) = <eq> (<strip-annos> v1, <strip-annos> v2)

  //match template with name using strategy that must succeed on the name
  match-template-with-name(sname) =
    where(
      ?TemplateCall(<sname>,_,_,_)
    )

/*
rules

  add-annotation-to-template-call(|name,anno) : TemplateCall(n@name,args,p,b){anno*} -> TemplateCall(n,args,p,b){[anno|anno*]}

  add-annotation-to-defined-template-call(|anno) : TemplateCall(n,args,p,b){anno*} -> TemplateCall(n,args,p,b){[anno|anno*]} where <CallToDefinedTemplate> n
*/
