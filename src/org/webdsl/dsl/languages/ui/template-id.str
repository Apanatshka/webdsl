module org/webdsl/dsl/languages/ui/template-id

rules

  normalize-constructor :
    TemplateId(){anno*} -> Call(ThisCall("getTemplate", []), "getUniqueId", []){anno*}

rules

  reserved-var-name-message : "id" -> "Variable name 'id' is not allowed, it refers to the current unique template id."

  constraint-error-action : VarDecl(x, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : TemplateVarDecl(x, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : VarDeclInit(x, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : TemplateVarDeclInit(x, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : VarDeclInitInferred(x, _)-> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : TemplateVarDeclInitInferred(x, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : GlobalVarDeclInit(x, _, _)-> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : GlobalVarDeclInitInferred(x, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : For(x, _, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForInferred(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForAll(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForCount(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : ForStmt(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForStmtInferred(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForAllStmt(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForCountStmt(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : ForExp(_, x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action :
    Placeholder(Add(String(""),Var(_)), _){anno*} -> <add-error(|<reserved-var-name-message> x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*

  constraint-error-action :
    PlaceholderWithAjaxCall(Add(String(""),Var(_)), _){anno*} -> <add-error(|<reserved-var-name-message> x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*

  constraint-error-action : ExpVarArgFor(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ExpVarArgForInferred(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ExpVarArgForAll(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ExpVarArgForCount(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
