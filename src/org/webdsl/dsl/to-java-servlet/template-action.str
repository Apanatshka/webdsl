module org/webdsl/dsl/to-java-servlet/template-action

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet

rules // submit action call

  generate-submit-action-run-invoke(| x_action, e*) = generate-submit-action-run-invoke(| x_action, "ident", e*)

  generate-submit-action-run-invoke(| x_action, ident, e*) =
    with( pkgtname := <ActionPackage> )
  ; !java:bstm|[ new pkgtname.x_action().run(threadLocalPageCached, getEnv(), getElementsContext(), e*, ident); ]|

  generate-submit-action-databind-phase(| x_action) =
    with( ambname := <ActionPackage> )
  ; !java:bstm|[ threadLocalPageCached.actionToBeExecutedHasDisabledValidation = ambname.x_action.isValidationDisabled(); ]|

rules // action methods

  /**
   * Generate action method code
   */
  generate-code-template-action = where(not(ThisEmail));log-time(generate-action-java-servlet-code|"generate-action-java-servlet-code"); fail

  //should only generate an action function
  generate-action-java-servlet-code :
    Action(amod*, x_action, farg*, Block(stat*)){anno*} ->
    <emit-java-code-local>
    compilation-unit|[
      package pkgname_act;

      public class x_action extends utils.TemplateAction{
          
        ~*cbds_ignorevalidation*
          
        public void run(final utils.AbstractPageServlet threadLocalPageCached, final org.webdsl.lang.Environment env, final String elementsContext, param*){
          handleAction(threadLocalPageCached, env, elementsContext, actionident, new utils.TemplateActionBody(){
            public void run(){
              bstm_nonfinalvars*
              bstm*
            }
          });
        }
      }
    ]|
    with
    {| InAction :
         rules(InAction := <id>)
       ; (bstm_nonfinalvars*, farg1*) := <map(make-non-final-action-var); unzip; (concat,id)> farg*
       ; param* := <add-input-id-for-action-as-param; map(arguments-to-java-servlet; add-final-modifier-to-java-farg <+ debug(!"map failed in template-action.str"))> farg1*
       ; bstm* := <statements-to-java-servlet> stat*
    |}
    ; pkgname_act := <ActionPackage>
    ; if <fetch(ActionModifierIgnoreValidation)> amod*
      then cbds_ignorevalidation* := [ class-body-dec|[ public static boolean isValidationDisabled(){ return true; } ]| ]
      else cbds_ignorevalidation* := [ class-body-dec|[ public static boolean isValidationDisabled(){ return false; } ]| ] end
    ; x_template := <ThisTemplateClassName>

  add-input-id-for-action-as-param :
    params -> <concat> [params,[Arg("actionident",SimpleSort("String"))]]
    
  add-final-modifier-to-java-farg :
    Param(mod*, type, name) -> Param([Final()|mod*],type,name)
          
  make-non-final-action-var :  
    arg@Arg(x1,srt) -> (bstm*|[ t x1 = null; x1 = x2; ]|, Arg(x2,srt)) // need to assign null first, otherwise Java compiler gives 'variable might not have been initialized' error on the final argument
    where not(<is-ref-type> srt)
    with  t := <argument-java-servlet-java-type> arg
        ; x2 := <concat-strings> [x1,"arg"]
          
  make-non-final-action-var :  
    arg@Arg(x,srt)  -> ([], arg)
    where <is-ref-type> srt
