module org/webdsl/dsl/to-java-servlet/function-exp

rules

  builtin-java-type : FunctionSort(_,_) -> type|[ org.webdsl.lang.Function ]|
  
rules
  
  expression-to-java-servlet :
    FunctionRefCallPartial(fr@FunctionRef(x,fargtypes,srt),extraArgs) ->
    java:expr |[ new org.webdsl.lang.Function(new webdsl.generated.functions.x_classname()).partial(e_args) ]|
    with x_classname := <get-function-class-name-from-functionref> fr
    with e_args := <map(expression-to-java-servlet); optimize-empty-array> extraArgs
  
  get-function-class-name-from-functionref : 
    FunctionRef(x1,fargtypes,srt) -> <concat-strings> [x2,"_"]
    with <get-anno(?NewFunctionNameAnno(x2))> x1 
    //<concat-strings> [<new-function-name> (x,fargtypes),"_"]
  
  expression-to-java-servlet :
    FunctionRefCall(fr@FunctionRef(x,fargtypes,srt),args) ->
    java:expr |[ new org.webdsl.lang.Function(new webdsl.generated.functions.x_classname()).apply(e_args) ]|
    with x_classname := <get-function-class-name-from-functionref> fr
    with e_args := <map(expression-to-java-servlet); optimize-empty-array> args
    
  expression-to-java-servlet :
    fr@FunctionRef(x,fargtypes,srt) ->
    java:expr |[ new org.webdsl.lang.Function(new webdsl.generated.functions.x_classname()) ]|
    with x_classname := <get-function-class-name-from-functionref> fr
    
  call-to-java-servlet :
    ThisCall(f, e1*) -> java:expr |[ (x_type)e.apply(e_args) ]|
    where FunctionSort(args,srt) := <get-type-anno> f
    with  e := <expression-to-java-servlet> Var(f)
    with  e_args := <map(expression-to-java-servlet); optimize-empty-array> e1*
    with  x_type := <java-type-name> srt
    