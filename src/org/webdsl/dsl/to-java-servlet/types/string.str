module org/webdsl/dsl/to-java-servlet/types/string

imports
  libstrategolib
  libjava-front
  libwebdsl-front

rules

  builtin-java-type :
    SimpleSort("String") -> type|[ String ]|

rules

  expression-to-java-servlet :
    String(x) -> expr|[ "~x'" ]|
    with  x' := <string-replace(|"\\~","~")> x

  expression-to-java-servlet = ?StringInterp(<string-interp-to-java-servlet>)

  string-interp-to-java-servlet =
    map( is-string; string-replace(|"\\~","~"); { ?x; !expr|[ "~x" ]| }
      <+ ?InterpExp(<!ExceptionIsEmptyString(<expression-to-java-servlet>, <extract-var-types-for-function-lifting>)>)
      <+ InterpTilde; !expr|[ "~" ]|
    )
  ; foldl(\(x,y) -> Plus(y,x)\ | expr|[ "" ]|)

  extract-var-types-for-function-lifting =
    collect(\ v@Var(_) -> <get-type-anno;java-type-name> v \)

rules //native java operations

 call-to-java-servlet :
   exp |[ e.concat(e1) ]| -> java |[ utils.StringType.concatWithSeparator(e_list,e_sep)  ]|
   where <anno-list-string-type-compatible> e
   with  e_list   := <expression-to-java-servlet> e
       ; e_sep    := <expression-to-java-servlet> e1

 call-to-java-servlet :
   exp |[ e.concat() ]| -> java |[ utils.StringType.concat(e_list)  ]|
   where <anno-list-string-type-compatible> e
   with  e_list   := <expression-to-java-servlet> e

 call-to-java-servlet :
   exp  |[ log(e1) ]| ->   java |[ org.webdsl.logging.Logger.info(e2) ]|
   where <anno-string-type-compatible> e1
   with  e2 := <expression-to-java-servlet> e1

 call-to-java-servlet :
   exp  |[ log(e1) ]| ->   java |[ org.webdsl.logging.Logger.info(e2) ]|
   where not(<anno-string-type-compatible> e1)
   with  e2 := <expression-to-java-servlet> e1

 call-to-java-servlet :
   exp  |[ e1.toString() ]| -> java |[ String.valueOf(e2) ]|
   with  e2 := <expression-to-java-servlet> e1

