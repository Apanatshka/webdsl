module org/webdsl/dsl/to-java-servlet/ajax/placeholder

imports
  libstrategolib
  libwebdsl-front

rules

  element-to-java-servlet :
    Placeholder(elem, name, elems) ->
    bstm* |[
      java.io.StringWriter x_sw = null;
      if(RENDER_PHASE == phase){
        out.print("<" + "~elem" + " id=\""+e_name+"\" class=\"webdsl-placeholder\">");
        x_sw = new java.io.StringWriter();
        out = new java.io.PrintWriter(x_sw);
        utils.ThreadLocalOut.push(out);
      }
      bstm*
      if(RENDER_PHASE == phase){
        utils.ThreadLocalOut.popChecked(out);
        out = utils.ThreadLocalOut.peek();
        String x_string = x_sw.toString();
        out.write(x_string); // write placeholder to normal out
        threadLocalPageCached.addReRenderPlaceholdersContent(e_name,x_string); // write placeholder to rerender 'buffer', will only add if this placeholder was marked for refreshing
        out.print("</" + "~elem" + ">");
      }
    ]|
    with bstm* := <elements-to-java-servlet> elems
       ; e_name := <placeholder-id-to-java-exp> name
       ; x_sw := <newname-webdsl> "tmpstringwriter"
       ; x_string := <newname-webdsl> "tmpstring"

  element-to-java-servlet :
    PlaceholderWithAjaxCall(elem, name, tc) ->
    bstm* |[
      if(RENDER_PHASE == phase){
        out.print("<" + "~elem" + " id=\""+e_name+"\" class=\"webdsl-placeholder\">");
        ~bstm*:bstm_thecall*
        out.print("</" + "~elem" + ">");
      }
    ]|
    with bstm_thecall* := <call-template-as-ajax-template-helper> tc
       ; e_name := <placeholder-id-to-java-exp> name
