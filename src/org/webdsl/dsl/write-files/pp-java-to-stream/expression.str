module org/webdsl/dsl/write-files/pp-java-to-stream/expression

imports
  libstratego-lib
  libjava-front

strategies

  expr-to-stream(s) = lit-to-stream(s)

  lit-to-stream(s) =
    ?Lit(l)
  ; <lit-inner-to-stream(s)> l

  expr-to-stream(s) =
    ?Parenthetical(e)
  ; <s> "("
  ; <expr-to-stream(s)> e
  ; <s> ")"

  exp-lval(s | lval, sym, e) =
    <lval-to-stream(s)> lval
  ; <s> sym
  ; <expr-to-stream(s)> e

  expr-to-stream(s) =
    ?Assign(lval, e)
  ; exp-lval(s| lval, "=", e)

  expr-to-stream(s) =
    ?AssignMul(lval, e)
  ; exp-lval(s| lval, "*=", e)

  expr-to-stream(s) =
    ?AssignDiv(lval, e)
  ; exp-lval(s| lval, "/=", e)

  expr-to-stream(s) =
    ?AssignRemain(lval, e)
  ; exp-lval(s| lval, "%=", e)

  expr-to-stream(s) =
    ?AssignPlus(lval, e)
  ; exp-lval(s| lval, "+=", e)

  expr-to-stream(s) =
    ?AssignMinus(lval, e)
  ; exp-lval(s| lval, "-=", e)

  expr-to-stream(s) =
    ?AssignLeftShift(lval, e)
  ; exp-lval(s| lval, "<<=", e)

  expr-to-stream(s) =
    ?AssignRightShift(lval, e)
  ; exp-lval(s| lval, ">>=", e)

  expr-to-stream(s) =
    ?AssignURightShift(lval, e)
  ; exp-lval(s| lval, ">>>=", e)

  expr-to-stream(s) =
    ?AssignAnd(lval, e)
  ; exp-lval(s| lval, "&=", e)

  expr-to-stream(s) =
    ?AssignExcOr(lval, e)
  ; exp-lval(s| lval, "^=", e)

  expr-to-stream(s) =
    ?AssignOr(lval, e)
  ; exp-lval(s| lval, "|=", e)

rules

  expr-to-stream(s) =
    ?Plus(e)
  ; <s> "+"
  ; <expr-to-stream(s)> e

  expr-to-stream(s) =
    ?Minus(e)
  ; <s> "-"
  ; <expr-to-stream(s)> e

  expr-to-stream(s) =
    ?PreIncr(e)
  ; <s> "++"
  ; <expr-to-stream(s)> e

  expr-to-stream(s) =
    ?PreDecr(e)
  ; <s> "--"
  ; <expr-to-stream(s)> e

  expr-to-stream(s) =
    ?PostIncr(e)
  ; <expr-to-stream(s)> e
  ; <s> "++"

  expr-to-stream(s) =
    ?PostDecr(e)
  ; <expr-to-stream(s)> e
  ; <s> "--"

rules

  exp-binop(s | e1, sym, e2) =
    <expr-to-stream(s)> e1
  ; <s> sym
  ; <expr-to-stream(s)> e2

  expr-to-stream(s) =
    ?Mul(e1, e2)
  ; exp-binop(s| e1, "*", e2)

  expr-to-stream(s) =
    ?Div(e1, e2)
  ; exp-binop(s| e1, "/", e2)

  expr-to-stream(s) =
    ?Remain(e1, e2)
  ; exp-binop(s| e1, "%", e2)

// Plus(Lit(String([Chars("course")])),Lit(String([Chars(".")])))

  expr-to-stream(s) =
    ?Plus(e1, e2)
  ; exp-binop(s| e1, "+", e2)

  expr-to-stream(s) =
    ?Minus(e1, e2)
  ; exp-binop(s| e1, "-", e2)

  expr-to-stream(s) =
    ?LeftShift(e1, e2)
  ; exp-binop(s| e1, "<<", e2)

  expr-to-stream(s) =
    ?RightShift(e1, e2)
  ; exp-binop(s| e1, ">>", e2)

  expr-to-stream(s) =
    ?URightShift(e1, e2)
  ; exp-binop(s| e1, ">>>", e2)

  expr-to-stream(s) =
    ?Lt(e1, e2)
  ; exp-binop(s| e1, "<", e2)

  expr-to-stream(s) =
    ?Gt(e1, e2)
  ; exp-binop(s| e1, ">", e2)

  expr-to-stream(s) =
    ?LtEq(e1, e2)
  ; exp-binop(s| e1, "<=", e2)

  expr-to-stream(s) =
    ?GtEq(e1, e2)
  ; exp-binop(s| e1, ">=", e2)

  expr-to-stream(s) =
    ?Eq(e1, e2)
  ; exp-binop(s| e1, "==", e2)

  expr-to-stream(s) =
    ?NotEq(e1, e2)
  ; exp-binop(s| e1, "!=", e2)

  expr-to-stream(s) =
    ?LazyAnd(e1, e2)
  ; exp-binop(s| e1, "&&", e2)

  expr-to-stream(s) =
    ?LazyOr(e1, e2)
  ; exp-binop(s| e1, "||", e2)

  expr-to-stream(s) =
    ?And(e1, e2)
  ; exp-binop(s| e1, "&", e2)

  expr-to-stream(s) =
    ?ExcOr(e1, e2)
  ; exp-binop(s| e1, "^", e2)

  expr-to-stream(s) =
    ?Or(e1, e2)
  ; exp-binop(s| e1, "|", e2)

  expr-to-stream(s) =
    ?InstanceOf(e1, e2)
  ; <expr-to-stream(s)> e1
  ; <s> " instanceof "
  ; <classorinterfacetype-to-stream(s)> e2

  expr-to-stream(s) =
    ?Complement(e)
  ; <s> "~"
  ; <expr-to-stream(s)> e

  expr-to-stream(s) =
    ?Not(e)
  ; <s> "!"
  ; <expr-to-stream(s)> e

  expr-to-stream(s) =
    ?Cond(e1, e2, e3)
  ; <expr-to-stream(s)> e1
  ; <s> "?"
  ; <expr-to-stream(s)> e2
  ; <s> ":"
  ; <expr-to-stream(s)> e3

  expr-to-stream(s) =
    ?This()
  ; <s> "this"

  expr-to-stream(s) =
    ?QThis(q)
  ; <typename-to-stream(s)> q
  ; <s> ".this"

/**
 * Method Invocations
 */
rules
/*
Invoke(
  Method(MethodName(Id(indexDirAutoComplete())))
, [ ExprName(Id(entityClass()))
  , ArrayAccess(ExprName(Id(fields())), ExprName(Id(c())))
  ]
)
*/
  expr-to-stream(s) =
    ?Invoke(method, exprs)
  ; <method-to-stream(s)> method
  ; <list-to-args-stream(s)> exprs

  method-to-stream(s) =
    ?Method(n)
  ; <methodname-to-stream(s) <+ expr-to-stream(s)> n

  method-to-stream(s) =
    ?Method(e, type-args, Id(x))
  ; <expr-to-stream(s)> e
  ; <s> "."
  ; <typeargs-to-stream(s)> type-args
  ; <s> x

  method-to-stream(s) =
    ?SuperMethod(type-args, Id(x))
  ; <s> "super."
  ; <typeargs-to-stream(s)> type-args
  ; <s> x

  method-to-stream(s) =
    ?QSuperMethod(q, type-args, Id(x))
  ; <s> q
  ; <s> ".super."
  ; <typeargs-to-stream(s)> type-args
  ; <s> x

  method-to-stream(s) =
    ?GenericMethod(type-name, type-args, Id(x))
  ; <typename-to-stream(s)> type-name
  ; <s> "."
  ; <typeargs-to-stream(s)> type-args
  ; <s> x

/**
 * New instance without body
 */
rules

  expr-to-stream(s) =
    ?NewInstance(type-args, type, exprs, None())
  ; <s> "new "
  ; <typeargs-to-stream(s)> type-args
  ; <classorinterfacetype-to-stream(s)> type
  ; <list-to-args-stream(s)> exprs

  expr-to-stream(s) =
    ?QNewInstance(e, type-args1, Id(x), type-args2, exprs, None())
  ; <expr-to-stream(s)> e
  ; <s> ".new "
  ; <typeargs-to-stream(s)> type-args1
  ; <s> x
  ; <typeargs-to-stream(s)> type-args2
  ; <list-to-args-stream(s)> exprs

/**
 * New instance with body
 */
rules

  expr-to-stream(s) =
    ?NewInstance(type-args, type, exprs, Some(body))
  ; <s> "new "
  ; <typeargs-to-stream(s)> type-args
  ; <classorinterfacetype-to-stream(s)> type
  ; <list-to-args-stream(s)> exprs
  ; <classbody-to-stream(s)> body

  expr-to-stream(s) =
    ?QNewInstance(e, type-args1, Id(x), type-args2, exprs, Some(body))
  ; <expr-to-stream(s)> e
  ; <s> ".new "
  ; <typeargs-to-stream(s)> type-args1
  ; <s> x
  ; <typeargs-to-stream(s)> type-args2
  ; <list-to-args-stream(s)> exprs
  ; <classbody-to-stream(s)> body

rules

  expr-to-stream(s) =
    ?NewArray(type, dimexprs, [])
  ; <s> "new "
  ; <typename-to-stream(s)> type
  ; <dim-to-stream(s)> dimexprs

// NewArray(TypeName(Id("String")),[Dim(Lit(Deci("0")))],[])

  expr-to-stream(s) =
    ?NewArray(type, dims, init@ArrayInit(exprs))
  ; <s> "new "
  ; <typename-to-stream(s)> type
  ; <dim-to-stream(s)> dims
  ; <array-to-args-stream(s)> exprs

  dim-to-stream(s) =
    ?[Dim()]
  ; <s> "[]"

  dim-to-stream(s) =
    ?[]
  ; <s> "[]"

  dim-to-stream(s) =
    ?list@[ x | xs ]
  ; <s> "["
  ; <print-comma-sep(s,?Dim(<expr-to-stream(s)>))> list
  ; <s> "]"

  /**
   * Special ArrayBaseType
   */
  expr-to-stream(s) =
    ?UnboundWld(name)
  ; <s> [name, "<?>"]

rules

  lval-to-stream(s) =
    ?ArrayAccess(b1, b2)
  ; <expr-to-stream(s)> b1
  ; <s> "["
  ; <expr-to-stream(s)> b2
  ; <s> "]"

  lval-to-stream(s) =
    ?CastPrim(b1, b2)
  ; <s> "("
  ; <classorinterfacetype-to-stream(s)> b1
  ; <s> ")"
  ; <expr-to-stream(s)> b2 

  lval-to-stream(s) =
    ?CastRef(b1, b2)
  ; <s> "("
  ; <type-to-stream(s)> b1
  ; <s> ")"
  ; <expr-to-stream(s)> b2

  lval-to-stream(s) =
    ?Field(b, Id(x))
  ; <expr-to-stream(s)> b
  ; <s> "."
  ; <s> x

  lval-to-stream(s) =
    ?SuperField(Id(x))
  ; <s> "super."
  ; <s> x

  lval-to-stream(s) =
    ?QSuperField(b, Id(x))
  ; <expr-to-stream(s)> b
  ; <s> ".super."
  ; <s> x
