module WebDSL-Lexical

exports

  lexical syntax
    Id -> TemplateCallId  %% hook for reject rules on templatecall names
    [a-zA-Z][a-zA-Z0-9\_]* -> Id
    [a-zA-Z][a-zA-Z0-9\_\-]* -> PageId
    [a-zA-Z0-9\-\_\.]+     -> ExtendedId
    {ExtendedId "/"}+      -> ModuleName
    ~[\n\r]*               -> SectionName

  lexical restrictions
    Id         -/- [a-zA-Z0-9\_]
    PageId     -/- [a-zA-Z0-9\_\-]
    ModuleName -/- [a-zA-Z0-9\/]

  lexical syntax
    "-"? [0-9]+            -> Int
    "-"? [0-9]+ "L"        -> Long

  lexical syntax
    "-"? FloatDigits
     ExponentPart? [fFdD]? -> Float
    [0-9]* "." [0-9]+      -> FloatDigits
    [0-9]+                 -> FloatDigits
    [eE] SignedInteger     -> ExponentPart
    [\+\-]? [0-9]+         -> SignedInteger

    "-"? [0-9]+            -> Float {reject}
    "."                    -> FloatDigits  {reject}

  lexical restrictions
    Int           -/- [0-9]
    Float         -/- [fFdD]
    FloatDigits   -/- [0-9]
    SignedInteger -/- [0-9]

  %% Kernel syntax is required here since we do not want LAYOUT to be parsed between
  %% the first QMLex and StringLex
  syntax
    %% string literal as expression
    <QMLex-LEX> <StringLex-LEX> <QMLex-LEX>  -> <String-CF>  {ast("String(<2>)")}
    <QMLex-LEX> StringPart* <QMLex-LEX>      -> <String-CF>  {ast("StringInterp(<2>)"), avoid}

    %% string literal as template element
    <QMLex-LEX> <StringLex-LEX> <QMLex-LEX> -> <TemplateElement-CF> {ast("Text(<2>)")}
    <QMLex-LEX> StringPart* <QMLex-LEX>     -> <TemplateElement-CF> {ast("TextInterp(<2>)"), avoid}

    SimpleStringPart       -> StringPart
    <StringLexInterp-LEX>  -> StringPart

    "~" <SimpleExp-CF>    -> SimpleStringPart {cons("InterpExp")}
    "~" "(" <Exp-CF> ")"  -> StringPart {cons("InterpExp")}
    "\\~"                 -> StringPart {cons("InterpTilde")}  %% escape to get a literal '~'

  restrictions
    SimpleStringPart -/- [\.\(]  %% make fieldaccess/call not part of string that follows
                                 %% use parentheses variant if a . is needed in the string

  context-free syntax
    %% ~SimpleExp and ~(Exp) shorthand for output template call
    "~" SimpleExp    -> OutputShorthand {cons("OutputShorthand")}
    "~" "(" Exp ")"  -> OutputShorthand {cons("OutputShorthand")}
    OutputShorthand  -> TemplateElement

  context-free syntax
  %% SimpleExp: specific commonly occuring expressions allowed directly after '~' inside string
  %% allowing all expressions directly after '~' causes too many ambiguities
  %% parentheses expression is used as delimiter for inserting any expression
  %% allowed after '~': var/fieldaccess/thiscall/call/brackets a, a.b, a(), a.b(), (exp)
  %% a '.' after a SimpleExp must be rejected as part of String to avoid amb, e.g. not allowed: "~a."
  %% in these cases, use '()' if a '.' is needed as part of the string,       e.g.     allowed: "~(a)."

   VarId             -> SimpleVar {cons("Var")}
   SimpleVar         -> SimpleExp
   SimpleExp "." Id  -> SimpleExp {cons("FieldAccess")}

   Id "(" {Exp ","}* ")"                -> SimpleExp {cons("ThisCall")}
   SimpleExp "." Id "(" {Exp ","}* ")"  -> SimpleExp {cons("Call")}

  lexical syntax
    "\""                         -> QMLex
    StringChar*                  -> StringLex
    StringChar+                  -> StringLexInterp
    ~[\"\n\~]                    -> StringChar
    
    "\\\""                       -> StringChar

  lexical restrictions
    StringLex
    StringLexInterp -/- ~[\"\n\~]

  lexical syntax
    [\ \t\n\r]                   -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | Eof) -> LAYOUT
    "/*" CommentChar* "*/"       -> LAYOUT
                                 -> Eof
    ~[\*]                        -> CommentChar
    Asterisk                     -> CommentChar
    [\*]                         -> Asterisk

  lexical restrictions
    Asterisk   -/- [\/]
    Eof        -/- ~[]

  context-free restrictions
    LAYOUT?     -/- [\ \t\n\r]
    LAYOUT?     -/- [\/].[\/]
    LAYOUT?     -/- [\/].[\*]
    SectionName -/- ~[\n\r]

  lexical syntax
    ~[\ \t\n\r\}]+ -> Word
  lexical restrictions
     Word -/- ~[\ \t\n\r\}]

  context-free restrictions
    "page" "local" "email" "feed" "template" "schedule" -/- [a-zA-Z0-9]

