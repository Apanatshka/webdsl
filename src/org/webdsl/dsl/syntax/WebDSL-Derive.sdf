module WebDSL-Derive

imports
  WebDSL-UI
  WebDSL-Lexical

exports

  sorts Derive DeriveType DeriveProperty

context-free syntax

  "derive" Id "from" Exp "for" "("
    {DeriveProperty ","}*
  ")"                               -> TemplateElement {cons("Derive"), prefer}
  "derive" Id "from" Exp            -> TemplateElement {cons("Derive"), prefer}
  %%"derive" Id                       -> TemplateElement {cons("Derive"), prefer}
  %% Disabled this one for now because it is causing ambiguities, have a look at this Ruben!

  "derive" Id "from" Exp "for" "("
    {DeriveProperty ","}*
  ")" DeriveBody                    -> TemplateElement {cons("Derive"), prefer}
  "derive" Id "from" Exp DeriveBody -> TemplateElement {cons("Derive"), prefer}
  "derive" Id DeriveBody            -> TemplateElement {cons("Derive"), prefer}

  Id                                -> DeriveProperty {cons("DeriveDefault")}
  Id "(" Id ")"                     -> DeriveProperty {cons("DeriveMode")}

  "{" DeriveBodyElement* "}"        -> DeriveBody {cons("DeriveBody")}

  Id "{" TemplateElement* "}"       -> DeriveBodyElement {cons("DeriveBodyElement")}

  "derive"                          -> TemplateCall {reject}

  "derive" "crud" Id -> Definition {cons("DeriveCrud"), prefer}
  "derive" "CRUD" Id -> Definition {cons("DeriveCrud"), prefer}


context-free syntax %% custom expand templates

  "expand" ExpandId+ "to" Id -> Definition {cons("ExpandTemplateCall")}

  "expandtemplate" Id "to" Id+ "{" Definition* "}" -> Definition {cons("ExpandTemplateDefinition")}

  "expand" -> ExpandId {reject}

  "expand" ExpandId+ "to" Id "{" TemplateElement* "}" -> TemplateElement {cons("ExpandLocal"), prefer}
  "expand" ExpandId+ "to" Id "{" EntityBodyDeclaration* "}" -> EntityBodyDeclaration {cons("ExpandLocal"), prefer}
  "expand" ExpandId+ "to" Id "{" Statement* "}" -> Statement {cons("ExpandLocal"), prefer}
  "expand" ExpandId+ "to" Id "{" ObjectPropertyAssignment* "}" -> ObjectPropertyAssignment {cons("ExpandLocal"), prefer}
  "expand" ExpandId+ "to" Id "{" Definition* "}" -> Definition {cons("ExpandLocal"), prefer}
  "expand" ExpandId+ "to" Id "{" Exp "}" -> Exp {cons("ExpandLocal"), prefer}
  "expand" ExpandId+ "to" Id "{" Attribute "}" -> Attribute {cons("ExpandLocal"), prefer}
  "expand" ExpandId+ "to" Id "{" PropertyAssignment "}" -> PropertyAssignment {cons("ExpandLocal"), prefer}

  lexical syntax
    [a-zA-Z0-9\_\-]+ -> ExpandId
  lexical restrictions
    ExpandId -/- [a-zA-Z0-9\_\-]
